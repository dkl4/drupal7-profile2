<?php

/**
 * @file
 * Support for configurable user profiles.
 */

/**
 * Implements hook_entity_info().
 */
function profile2_entity_info() {
  $return = array(
    'profile2' => array(
      'label' => t('Profile'),
      'plural label' => t('Profiles'),
      'description' => t('Profile2 user profiles.'),
      'entity class' => 'Profile',
      'controller class' => 'EntityAPIController',
      'base table' => 'profile',                    // Defined in profile2.install
      'fieldable' => TRUE,
      'view modes' => array(
        'account' => array(
          'label' => t('User account'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'pid',
        'bundle' => 'type',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'uri callback' => 'entity_class_uri',
      'access callback' => 'profile2_access',
      'module' => 'profile2',
      'metadata controller class' => 'Profile2MetadataController'    // Not sure what this does
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('profile_type', 'p')
    ->fields('p')
    ->execute()
    ->fetchAllAssoc('type');

  // This defines where you MANAGE the profile types in the UI.  This is where
  // you add, import, delete profiles, or manage (add/del) fields attached to the profile type
  foreach ($types as $type => $info) {
    $return['profile2']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/profiles/manage/%profile2_type',  // Diff between path and REAL path?
        'real path' => 'admin/structure/profiles/manage/' . $type,
        'bundle argument' => 4,                                      // This must be type (arg num in path)
        'access arguments' => array('administer profiles'),
      ),
    );
  }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $return['profile2']['field cache'] = FALSE;
    $return['profile2']['entity cache'] = TRUE;
  }

  $return['profile2_type'] = array(
    'label' => t('Profile type'),                                   // Kind of repeats above, but this is exportable
    'plural label' => t('Profile types'),
    'description' => t('Profiles types of Profile2 user profiles.'),
    'entity class' => 'ProfileType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'profile_type',                                 // One diff is this has different base table from above
    'fieldable' => FALSE,
    'bundle of' => 'profile2',                                      // This profile2_type is actually pretty diff rom 'profile2'
    'exportable' => TRUE,
    'entity keys' => array(
      'id'    => 'id',
      'name'  => 'type',
      'label' => 'label',
    ),
    'access callback' => 'profile2_type_access',
    'module' => 'profile2',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/profiles',
      'file' => 'profile2.admin.inc',
      'controller class' => 'Profile2TypeUIController',
    ),
  );

  return $return;
}


/**
 * Menu argument loader; Load a profile type by string.
 *
 * @param $type
 *   The machine-readable name of a profile type to load.
 * @return
 *   A profile type array or FALSE if $type does not exist.
 */
// This is another important function.  With it, you can go to
// admin/structure/profiles/manage/PROFILE-TYPE-NAME/fields
// and manage (add/del) fields to attach to the type
function profile2_type_load($type) {
  return profile2_get_types($type);
}


/**
 * Implements hook_permission().
 */
function profile2_permission() {
  $permissions = array(
    'administer profile types' =>  array(
      'title' => t('Administer profile types'),
      'description' => t('Create and delete fields on user profiles, and set their permissions.'),
    ),
    'administer profiles' =>  array(
      'title' => t('Administer profiles'),
      'description' => t('Edit and view all user profiles.'),
    ),
  );
  // Generate per profile type permissions.
  foreach (profile2_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit own $type_name profile" => array(
        'title' => t('%type_name: Edit own profile', array('%type_name' => $type->label)),
      ),
      "edit any $type_name profile" => array(
        'title' => t('%type_name: Edit any profile', array('%type_name' => $type->label)),
      ),
      "view own $type_name profile" => array(
        'title' => t('%type_name: View own profile', array('%type_name' => $type->label)),
      ),
      "view any $type_name profile" => array(
        'title' => t('%type_name: View any profile', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}



/**
 * Gets an array of all profile types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ProfileType[]
 *   Depending whether $type isset, an array of profile types or a single one.
 */
// This is a pretty critical function.  With this, and with the form defined in
// profile2.admin.inc, you can at least ADD a new profile type.
function profile2_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('profile2_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Fetch a profile object.
 *
 * @param $pid
 *   Integer specifying the profile id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $profile object or FALSE if it cannot be loaded.
 *
 * @see profile2_load_multiple()
 */
function profile2_load($pid, $reset = FALSE) {
  $profiles = profile2_load_multiple(array($pid), array(), $reset);
  return reset($profiles);
}


/**
 * Load multiple profiles based on certain conditions.
 *
 * @param $pids
 *   An array of profile IDs.
 * @param $conditions
 *   An array of conditions to match against the {profile} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of profile objects, indexed by pid.
 *
 * @see entity_load()
 * @see profile2_load()
 * @see profile2_load_by_user()
 */
function profile2_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('profile2', $pids, $conditions, $reset);
}

/**
 * Fetch profiles by account.
 *
 * @param $account
 *   The user account to load profiles for, or its uid.
 * @param $type_name
 *   To load a single profile, pass the type name of the profile to load.
 * @return
 *   Either a single profile or an array of profiles keyed by profile type.
 *
 * @see profile2_load_multiple()
 * @see profile2_profile2_delete()
 * @see Profile::save()
 */
function profile2_load_by_user($account, $type_name = NULL) {
  // Use a separate query to determine all profile ids per user and cache them.
  // That way we can look up profiles by id and benefit from the static cache
  // of the entity loader.
  $cache = &drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid])) {
    if (empty($type_name)) {
      $profiles = profile2_load_multiple(FALSE, array('uid' => $uid));
      // Cache ids for further lookups.
      $cache[$uid] = array();
      foreach ($profiles as $pid => $profile) {
        $cache[$uid][$profile->type] = $pid;
      }
      return $profiles ? array_combine(array_keys($cache[$uid]), $profiles) : array();
    }
    $cache[$uid] = db_select('profile', 'p')
      ->fields('p', array('type', 'pid'))
      ->condition('uid', $uid)
      ->execute()
      ->fetchAllKeyed();
  }
  if (isset($type_name)) {
    return isset($cache[$uid][$type_name]) ? profile2_load($cache[$uid][$type_name]) : FALSE;
  }
  // Return an array containing profiles keyed by profile type.
  return $cache[$uid] ? array_combine(array_keys($cache[$uid]), profile2_load_multiple($cache[$uid])) : $cache[$uid];
}


/**
 * Implements hook_profile2_delete().
 */
function profile2_profile2_delete($profile) {
  // Clear the static cache from profile2_load_by_user().
  $cache = &drupal_static('profile2_load_by_user', array());
  unset($cache[$profile->uid][$profile->type]);
}

/**
 * Deletes a profile.
 */
function profile2_delete(Profile $profile) {
  $profile->delete();
}

/**
 * Delete multiple profiles.
 *
 * @param $pids
 *   An array of profile IDs.
 */
function profile2_delete_multiple(array $pids) {
  entity_get_controller('profile2')->delete($pids);
}

/**
 * Implements hook_user_delete().
 */
function profile2_user_delete($account) {
  foreach (profile2_load_by_user($account) as $profile) {
    profile2_delete($profile);
  }
}


/**
 * Create a new profile object.
 */
function profile2_create(array $values) {
  return new Profile($values);
}

/**
 * Deprecated. Use profile2_create().
 */
function profile_create(array $values) {
  return new Profile($values);
}


/**
 * Saves a profile to the database.
 *
 * @param $profile
 *   The profile object.
 */
function profile2_save(Profile $profile) {
  return $profile->save();
}


/**
 * Saves a profile type to the db.
 */
function profile2_type_save(ProfileType $type) {
  $type->save();
}


/**
 * Deletes a profile type from.
 */
function profile2_type_delete(ProfileType $type) {
  $type->delete();
}


/**
 * Implements hook_profile2_type_insert().
 */
function profile2_profile2_type_insert(ProfileType $type) {
  // Always rebuild the menu in case a profile type is inserted or changed, as
  // also extension modules like profile2 page might need menu rebuilds. In
  // order to avoid possible multiple rebuilds of modules we just do it always
  // but once here.
  menu_rebuild();
}

/**
 * Implements hook_profile2_type_update().
 */
function profile2_profile2_type_update(ProfileType $type) {
  // @see profile2_profile2_type_insert()
  menu_rebuild();
}

/**
* Implements hook_profile2_type_delete()
*/
function profile2_profile2_type_delete($type) {
  // Delete all profiles of this type.
  if ($pids = array_keys(profile2_load_multiple(FALSE, array('type' => $type->type)))) {
    profile2_delete_multiple($pids);
  }
  // @see profile2_profile2_type_insert()
  menu_rebuild();
}


/**
 * Implements hook_user_categories().
 */
function profile2_user_categories() {
  $data = array();
  foreach (profile2_get_types() as $type => $info) {
    if ($info->userCategory) {
      $data[] = array(
        'name' => $type,
        'title' => $info->label,
        // Add an offset so a weight of 0 appears right of the account category.
        'weight' => $info->weight + 3,
        'access callback' => 'profile2_category_access',
        'access arguments' => array(1, $type)
      );
    }
  }
  return $data;
}

/**
 * Menu item access callback - check if a user has access to a profile category.
 */
function profile2_category_access($account, $type_name) {
  // As there might be no profile yet, create a new object for being able to run
  // a proper access check.
  $profile = profile2_create(array('type' => $type_name, 'uid' => $account->uid));
  return ($account->uid > 0 && $profile->type()->userCategory && profile2_access('edit', $profile));
}



/**
 * Access callback for the entity API.
 */
function profile2_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer profile types', $account);
}

/**
 * Implements hook_theme().
 */
function profile2_theme() {
  return array(
    'profile2_admin_type' => array(
      'variables' => array('label' => NULL, 'type' => NULL),
    ),
    'profile2' => array(
      'render element' => 'elements',
      'template' => 'profile2',
    ),
  );
}

/**
 * The class used for profile entities.
 */
class Profile extends Entity {

  /**
   * The profile id.
   *
   * @var integer
   */
  public $pid;

  /**
   * The name of the profile type.
   *
   * @var string
   */
  public $type;

  /**
   * The profile label.
   *
   * @var string
   */
  public $label;

  /**
   * The user id of the profile owner.
   *
   * @var integer
   */
  public $uid;

  /**
   * The Unix timestamp when the profile was created.
   *
   * @var integer
   */
  public $created;

  /**
   * The Unix timestamp when the profile was most recently saved.
   *
   * @var integer
   */
  public $changed;


  public function __construct($values = array()) {
    if (isset($values['user'])) {
      $this->setUser($values['user']);
      unset($values['user']);
    }
    if (isset($values['type']) && is_object($values['type'])) {
      $values['type'] = $values['type']->type;
    }
    if (!isset($values['label']) && isset($values['type']) && $type = profile2_get_types($values['type'])) {
      // Initialize the label with the type label, so newly created profiles
      // have that as interim label.
      $values['label'] = $type->label;
    }
    parent::__construct($values, 'profile2');
  }

  /**
   * Returns the user owning this profile.
   */
  public function user() {
    return user_load($this->uid);
  }

  /**
   * Sets a new user owning this profile.
   *
   * @param $account
   *   The user account object or the user account id (uid).
   */
  public function setUser($account) {
    $this->uid = is_object($account) ? $account->uid : $account;
  }

  /**
   * Gets the associated profile type object.
   *
   * @return ProfileType
   */
  public function type() {
    return profile2_get_types($this->type);
  }

  /**
   * Returns the full url() for the profile.
   */
  public function url() {
    $uri = $this->uri();
    return url($uri['path'], $uri);
  }

  /**
   * Returns the drupal path to this profile.
   */
  public function path() {
    $uri = $this->uri();
    return $uri['path'];
  }

  public function defaultUri() {
    return array(
      'path' => 'user/' . $this->uid,
      'options' => array('fragment' => 'profile-' . $this->type),
    );
  }

  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content = array();
    // Assume newly create objects are still empty.
    if (!empty($this->is_new)) {
      $content['empty']['#markup'] = '<em class="profile2-no-data">' . t('There is no profile data yet.') . '</em>';
    }
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }

  public function save() {
    // Care about setting created and changed values. But do not automatically
    // set a created values for already existing profiles.
    if (empty($this->created) && (!empty($this->is_new) || !$this->pid)) {
      $this->created = REQUEST_TIME;
    }
    $this->changed = REQUEST_TIME;

    parent::save();
    // Update the static cache from profile2_load_by_user().
    $cache = &drupal_static('profile2_load_by_user', array());
    if (isset($cache[$this->uid])) {
      $cache[$this->uid][$this->type] = $this->pid;
    }
  }
}



/**
 * Use a separate class for profile types so we can specify some defaults
 * modules may alter.
 */
class ProfileType extends Entity {

  /**
   * Whether the profile type appears in the user categories.
   */
  public $userCategory = TRUE;

  /**
   * Whether the profile is displayed on the user account page.
   */
  public $userView = TRUE;

  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'profile2_type');
  }

  /**
   * Returns whether the profile type is locked, thus may not be deleted or renamed.
   *
   * Profile types provided in code are automatically treated as locked, as well
   * as any fixed profile type.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
}

